import java.text.SimpleDateFormat

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

plugins {
    id 'com.android.application'
    id 'com.google.firebase.appdistribution'
}

android {
    namespace 'org.moa.etlits'
    compileSdk 33

    defaultConfig {
        applicationId "org.moa.etlits"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            firebaseAppDistribution {
                serviceCredentialsFile=System.getenv("FIREBASE_CREDENTIALS_FILE")
                appId="1:140083916398:android:a89206a6503a1f2cd0407f"
                artifactType="APK"
                artifactPath="$rootDir/app/build/outputs/apk/debug/app-debug.apk"
                releaseNotes="${buildTime()}:This is a sample release note."
                groups="qa-group"
            }
        }
        release {
            // Caution! In production, you need to generate your own keystore file, and store it safely.
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            /*signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            firebaseAppDistribution {
                serviceCredentialsFile=''
                appId=""
                artifactType="AAB"
                artifactPath=""
                releaseNotes="This is a sample release note - Release"
                groups="qa-group"
            }*/
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

    //room dependencies
    def room_version = "2.5.2"
    def lifecycleVersion = '2.3.1'
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"


    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
    implementation("com.squareup.okhttp3:logging-interceptor:4.11.0")
}
